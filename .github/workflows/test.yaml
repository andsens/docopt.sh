name: Lint & test

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the project
      uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygments flit
        flit install
    - name: Lint with shellcheck
      uses: ludeeus/action-shellcheck@master
      with:
        ignore: tests
    - name: Lint with flake8
      run: |
        # error out if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test-python:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.5', '3.6', '3.7', '3.8']

    steps:
    - name: Checkout the project
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygments flit
        flit install
    - name: Test with pytest
      run: pytest

  test-bash:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Skip 4.2.53, it errors out on `$(fn)`
        bash-version: ['3.2', '3.2.48', '3.2.57', '4.0', '4.1', '4.2', '4.3', '4.3.30', '4.4', '5.0']

    steps:
    - name: Checkout the project
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygments flit
        flit install
    - name: Cache bash versions
      uses: actions/cache@v2
      env:
        cache-name: bash-version
      with:
        path: tests/bash-versions/${{ matrix.bash-version }}
        key: ${{ env.cache-name }}-${{ matrix.bash-version }}
    - name: Download & compile bash ${{ matrix.bash-version }}
      run:
        tests/get_bash.py "${{ matrix.bash-version }}"
    - name: Test with pytest
      run: pytest --bash-version "${{ matrix.bash-version }}"
